

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import random as r
train_loss =  [0.8963273244022713, 0.6129591810020665, 0.5911036411387296, 0.5769326488939677, 0.5777667074709159, 0.5656622773702528, 0.5501486616529719, 0.5382690571548843, 0.5259831369457074, 0.5205036583174824, 0.5148110348523921, 0.5092003991492497, 0.50601398031527, 0.5002730710149498, 0.4966400439016192, 0.4933147103795621, 0.4915652604569858, 0.48783968322298427, 0.4840585412368207, 0.4835062599189756, 0.4833481501137226, 0.4817899039881548, 0.4796330801241686, 0.47779994392654335, 0.47891784715332136, 0.47763504250951094, 0.4755987902806496, 0.47395654359232975, 0.4699142969040099, 0.46377205021569, 0.46062980352737015, 0.4577875568390503, 0.4584453101507305, 0.4523030634624106, 0.44726081677409074, 0.4479185700857709, 0.45087632339745104, 0.4465340767091312, 0.4460918300208113, 0.4483495833324915, 0.4437073366441716, 0.44226508995585173, 0.44082284326753185, 0.43738059657921197, 0.4394383498908921, 0.43519610320257224, 0.4294538565142524, 0.4293116098259325, 0.4230693631376127, 0.42072711644929284, 0.421084869760973, 0.4195426230726531, 0.4146003763843332, 0.4152581296960134, 0.41291588300769355, 0.4113736363193737, 0.40703138963105384, 0.404889142942734, 0.3984468962544141, 0.39420464956609425, 0.3955624028777744, 0.39442015618945453, 0.39277790950113467, 0.3958356628128148, 0.39569341612449493, 0.3925511694361751, 0.3921089227478552, 0.39536667605953535, 0.3940244293712155, 0.39098218268289564, 0.3867399359945758, 0.38859768930625593, 0.39115544261793606, 0.3917131959296162, 0.3855709492412963, 0.38752870255297645, 0.3886864558646566, 0.38514420917633674, 0.3823019624880169, 0.38455971579969705, 0.3877174691113772, 0.3903752224230574, 0.39223297573473753, 0.3919907290464177, 0.3869484823580978, 0.38430623566977795, 0.3856639889814581, 0.38142174229313824, 0.3840794956048184, 0.38553724891649854, 0.38059500222817866, 0.3742527555398588, 0.369410508851539, 0.36506826216321914, 0.3634260154748993, 0.3604837687865794, 0.3605415220982595, 0.36349927540993965]

# x = list(range(len(train_loss)))
# print(len(train_loss))
# print(train_loss)
# plt.ylabel("loss")
# plt.xlabel("epoch")
# plt.plot(x, train_loss, label="training")

# plt.legend()
# plt.show()

query = []
top10 = []
bottom10 = []
new_query = True
count = 0
with open("report_log.txt", "r") as f:
    for line in f.readlines():
        line = line.strip()
        if line == "":
            new_query = True
            count = 0
        elif new_query:
            query.append(line.split(" "))
            new_query = False
        elif count < 10:
            top10.append(line.split(" "))
            count += 1
        else:
            bottom10.append(line.split(" "))
print(query)
print(top10)
print(bottom10)
def load_img(paths):
    rt = []
    for loss, path in paths:
        rt.append((loss, mpimg.imread(path)))
    return rt
img_query = load_img(query)
img_top10 = load_img(top10)
img_bottom10 = load_img(bottom10)

k = 3
plt.figure(figsize=(12,10))
plt.subplot(5, 5, 1)
plt.imshow(img_query[k][1])
for i, (loss, img) in enumerate(img_top10[k*10:(k+1)*10]):
    plt.subplot(5, 5, 5 + i + 1)
    plt.imshow(img)
    plt.title(loss)
for i, (loss, img) in enumerate(img_bottom10[k*10:(k+1)*10]):
    plt.subplot(5, 5, 5 + 10 + i + 1)
    plt.imshow(img)
    plt.title(loss)
plt.show()